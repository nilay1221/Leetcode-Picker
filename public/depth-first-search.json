[{"questionId": "200", "title": "Number of Islands", "titleSlug": "number-of-islands", "likes": 8250, "dislikes": 241, "difficulty": "Medium"}, {"questionId": "101", "title": "Symmetric Tree", "titleSlug": "symmetric-tree", "likes": 6008, "dislikes": 163, "difficulty": "Easy"}, {"questionId": "98", "title": "Validate Binary Search Tree", "titleSlug": "validate-binary-search-tree", "likes": 5917, "dislikes": 683, "difficulty": "Medium"}, {"questionId": "17", "title": "Letter Combinations of a Phone Number", "titleSlug": "letter-combinations-of-a-phone-number", "likes": 5909, "dislikes": 521, "difficulty": "Medium"}, {"questionId": "207", "title": "Course Schedule", "titleSlug": "course-schedule", "likes": 5660, "dislikes": 234, "difficulty": "Medium"}, {"questionId": "124", "title": "Binary Tree Maximum Path Sum", "titleSlug": "binary-tree-maximum-path-sum", "likes": 5546, "dislikes": 385, "difficulty": "Hard"}, {"questionId": "105", "title": "Construct Binary Tree from Preorder and Inorder Traversal", "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal", "likes": 5075, "dislikes": 129, "difficulty": "Medium"}, {"questionId": "394", "title": "Decode String", "titleSlug": "decode-string", "likes": 4911, "dislikes": 231, "difficulty": "Medium"}, {"questionId": "114", "title": "Flatten Binary Tree to Linked List", "titleSlug": "flatten-binary-tree-to-linked-list", "likes": 4125, "dislikes": 401, "difficulty": "Medium"}, {"questionId": "494", "title": "Target Sum", "titleSlug": "target-sum", "likes": 4022, "dislikes": 163, "difficulty": "Medium"}, {"questionId": "337", "title": "House Robber III", "titleSlug": "house-robber-iii", "likes": 3964, "dislikes": 67, "difficulty": "Medium"}, {"questionId": "104", "title": "Maximum Depth of Binary Tree", "titleSlug": "maximum-depth-of-binary-tree", "likes": 3850, "dislikes": 95, "difficulty": "Easy"}, {"questionId": "199", "title": "Binary Tree Right Side View", "titleSlug": "binary-tree-right-side-view", "likes": 3801, "dislikes": 203, "difficulty": "Medium"}, {"questionId": "108", "title": "Convert Sorted Array to Binary Search Tree", "titleSlug": "convert-sorted-array-to-binary-search-tree", "likes": 3770, "dislikes": 274, "difficulty": "Easy"}, {"questionId": "210", "title": "Course Schedule II", "titleSlug": "course-schedule-ii", "likes": 3617, "dislikes": 166, "difficulty": "Medium"}, {"questionId": "893", "title": "All Nodes Distance K in Binary Tree", "titleSlug": "all-nodes-distance-k-in-binary-tree", "likes": 3482, "dislikes": 72, "difficulty": "Medium"}, {"questionId": "110", "title": "Balanced Binary Tree", "titleSlug": "balanced-binary-tree", "likes": 3430, "dislikes": 229, "difficulty": "Easy"}, {"questionId": "301", "title": "Remove Invalid Parentheses", "titleSlug": "remove-invalid-parentheses", "likes": 3319, "dislikes": 155, "difficulty": "Hard"}, {"questionId": "131", "title": "Palindrome Partitioning", "titleSlug": "palindrome-partitioning", "likes": 3316, "dislikes": 106, "difficulty": "Medium"}, {"questionId": "116", "title": "Populating Next Right Pointers in Each Node", "titleSlug": "populating-next-right-pointers-in-each-node", "likes": 3301, "dislikes": 164, "difficulty": "Medium"}, {"questionId": "329", "title": "Longest Increasing Path in a Matrix", "titleSlug": "longest-increasing-path-in-a-matrix", "likes": 3215, "dislikes": 56, "difficulty": "Hard"}, {"questionId": "100", "title": "Same Tree", "titleSlug": "same-tree", "likes": 3178, "dislikes": 85, "difficulty": "Easy"}, {"questionId": "112", "title": "Path Sum", "titleSlug": "path-sum", "likes": 3054, "dislikes": 604, "difficulty": "Easy"}, {"questionId": "695", "title": "Max Area of Island", "titleSlug": "max-area-of-island", "likes": 3002, "dislikes": 104, "difficulty": "Medium"}, {"questionId": "547", "title": "Number of Provinces", "titleSlug": "number-of-provinces", "likes": 2977, "dislikes": 178, "difficulty": "Medium"}, {"questionId": "133", "title": "Clone Graph", "titleSlug": "clone-graph", "likes": 2960, "dislikes": 1688, "difficulty": "Medium"}, {"questionId": "211", "title": "Design Add and Search Words Data Structure", "titleSlug": "design-add-and-search-words-data-structure", "likes": 2912, "dislikes": 125, "difficulty": "Medium"}, {"questionId": "109", "title": "Convert Sorted List to Binary Search Tree", "titleSlug": "convert-sorted-list-to-binary-search-tree", "likes": 2857, "dislikes": 97, "difficulty": "Medium"}, {"questionId": "113", "title": "Path Sum II", "titleSlug": "path-sum-ii", "likes": 2706, "dislikes": 84, "difficulty": "Medium"}, {"questionId": "130", "title": "Surrounded Regions", "titleSlug": "surrounded-regions", "likes": 2702, "dislikes": 776, "difficulty": "Medium"}, {"questionId": "332", "title": "Reconstruct Itinerary", "titleSlug": "reconstruct-itinerary", "likes": 2666, "dislikes": 1259, "difficulty": "Medium"}, {"questionId": "538", "title": "Convert BST to Greater Tree", "titleSlug": "convert-bst-to-greater-tree", "likes": 2602, "dislikes": 144, "difficulty": "Medium"}, {"questionId": "106", "title": "Construct Binary Tree from Inorder and Postorder Traversal", "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal", "likes": 2597, "dislikes": 49, "difficulty": "Medium"}, {"questionId": "801", "title": "Is Graph Bipartite?", "titleSlug": "is-graph-bipartite", "likes": 2535, "dislikes": 224, "difficulty": "Medium"}, {"questionId": "257", "title": "Binary Tree Paths", "titleSlug": "binary-tree-paths", "likes": 2524, "dislikes": 132, "difficulty": "Easy"}, {"questionId": "744", "title": "Network Delay Time", "titleSlug": "network-delay-time", "likes": 2510, "dislikes": 246, "difficulty": "Medium"}, {"questionId": "99", "title": "Recover Binary Search Tree", "titleSlug": "recover-binary-search-tree", "likes": 2393, "dislikes": 91, "difficulty": "Hard"}, {"questionId": "117", "title": "Populating Next Right Pointers in Each Node II", "titleSlug": "populating-next-right-pointers-in-each-node-ii", "likes": 2392, "dislikes": 199, "difficulty": "Medium"}, {"questionId": "1021", "title": "Distribute Coins in Binary Tree", "titleSlug": "distribute-coins-in-binary-tree", "likes": 2377, "dislikes": 81, "difficulty": "Medium"}, {"questionId": "111", "title": "Minimum Depth of Binary Tree", "titleSlug": "minimum-depth-of-binary-tree", "likes": 2344, "dislikes": 817, "difficulty": "Easy"}, {"questionId": "721", "title": "Accounts Merge", "titleSlug": "accounts-merge", "likes": 2343, "dislikes": 425, "difficulty": "Medium"}, {"questionId": "975", "title": "Range Sum of BST", "titleSlug": "range-sum-of-bst", "likes": 2283, "dislikes": 295, "difficulty": "Easy"}, {"questionId": "542", "title": "01 Matrix", "titleSlug": "01-matrix", "likes": 2274, "dislikes": 125, "difficulty": "Medium"}, {"questionId": "1300", "title": "Critical Connections in a Network", "titleSlug": "critical-connections-in-a-network", "likes": 2262, "dislikes": 117, "difficulty": "Hard"}, {"questionId": "129", "title": "Sum Root to Leaf Numbers", "titleSlug": "sum-root-to-leaf-numbers", "likes": 2243, "dislikes": 60, "difficulty": "Medium"}, {"questionId": "766", "title": "Flatten a Multilevel Doubly Linked List", "titleSlug": "flatten-a-multilevel-doubly-linked-list", "likes": 2222, "dislikes": 187, "difficulty": "Medium"}, {"questionId": "417", "title": "Pacific Atlantic Water Flow", "titleSlug": "pacific-atlantic-water-flow", "likes": 2125, "dislikes": 543, "difficulty": "Medium"}, {"questionId": "733", "title": "Flood Fill", "titleSlug": "flood-fill", "likes": 1887, "dislikes": 240, "difficulty": "Easy"}, {"questionId": "813", "title": "All Paths From Source to Target", "titleSlug": "all-paths-from-source-to-target", "likes": 1862, "dislikes": 92, "difficulty": "Medium"}, {"questionId": "871", "title": "Keys and Rooms", "titleSlug": "keys-and-rooms", "likes": 1804, "dislikes": 127, "difficulty": "Medium"}, {"questionId": "1207", "title": "Delete Nodes And Return Forest", "titleSlug": "delete-nodes-and-return-forest", "likes": 1780, "dislikes": 56, "difficulty": "Medium"}, {"questionId": "1114", "title": "Binary Search Tree to Greater Sum Tree", "titleSlug": "binary-search-tree-to-greater-sum-tree", "likes": 1460, "dislikes": 116, "difficulty": "Medium"}, {"questionId": "984", "title": "Most Stones Removed with Same Row or Column", "titleSlug": "most-stones-removed-with-same-row-or-column", "likes": 1449, "dislikes": 456, "difficulty": "Medium"}, {"questionId": "1029", "title": "Vertical Order Traversal of a Binary Tree", "titleSlug": "vertical-order-traversal-of-a-binary-tree", "likes": 1445, "dislikes": 2414, "difficulty": "Hard"}, {"questionId": "1022", "title": "Unique Paths III", "titleSlug": "unique-paths-iii", "likes": 1414, "dislikes": 92, "difficulty": "Hard"}, {"questionId": "922", "title": "Possible Bipartition", "titleSlug": "possible-bipartition", "likes": 1391, "dislikes": 37, "difficulty": "Medium"}, {"questionId": "933", "title": "Increasing Order Search Tree", "titleSlug": "increasing-order-search-tree", "likes": 1367, "dislikes": 531, "difficulty": "Easy"}, {"questionId": "774", "title": "Maximum Depth of N-ary Tree", "titleSlug": "maximum-depth-of-n-ary-tree", "likes": 1325, "dislikes": 60, "difficulty": "Easy"}, {"questionId": "513", "title": "Find Bottom Left Tree Value", "titleSlug": "find-bottom-left-tree-value", "likes": 1316, "dislikes": 174, "difficulty": "Medium"}, {"questionId": "971", "title": "Shortest Bridge", "titleSlug": "shortest-bridge", "likes": 1314, "dislikes": 87, "difficulty": "Medium"}, {"questionId": "1254", "title": "Deepest Leaves Sum", "titleSlug": "deepest-leaves-sum", "likes": 1314, "dislikes": 57, "difficulty": "Medium"}, {"questionId": "896", "title": "Smallest Subtree with all the Deepest Nodes", "titleSlug": "smallest-subtree-with-all-the-deepest-nodes", "likes": 1300, "dislikes": 294, "difficulty": "Medium"}, {"questionId": "515", "title": "Find Largest Value in Each Tree Row", "titleSlug": "find-largest-value-in-each-tree-row", "likes": 1297, "dislikes": 72, "difficulty": "Medium"}, {"questionId": "1008", "title": "Binary Tree Cameras", "titleSlug": "binary-tree-cameras", "likes": 1273, "dislikes": 19, "difficulty": "Hard"}, {"questionId": "999", "title": "Regions Cut By Slashes", "titleSlug": "regions-cut-by-slashes", "likes": 1271, "dislikes": 242, "difficulty": "Medium"}, {"questionId": "526", "title": "Beautiful Arrangement", "titleSlug": "beautiful-arrangement", "likes": 1264, "dislikes": 218, "difficulty": "Medium"}, {"questionId": "863", "title": "Sum of Distances in Tree", "titleSlug": "sum-of-distances-in-tree", "likes": 1248, "dislikes": 47, "difficulty": "Hard"}, {"questionId": "1092", "title": "Maximum Difference Between Node and Ancestor", "titleSlug": "maximum-difference-between-node-and-ancestor", "likes": 1215, "dislikes": 43, "difficulty": "Medium"}, {"questionId": "472", "title": "Concatenated Words", "titleSlug": "concatenated-words", "likes": 1152, "dislikes": 153, "difficulty": "Hard"}, {"questionId": "1428", "title": "Jump Game III", "titleSlug": "jump-game-iii", "likes": 1148, "dislikes": 36, "difficulty": "Medium"}, {"questionId": "904", "title": "Leaf-Similar Trees", "titleSlug": "leaf-similar-trees", "likes": 1137, "dislikes": 47, "difficulty": "Easy"}, {"questionId": "820", "title": "Find Eventual Safe States", "titleSlug": "find-eventual-safe-states", "likes": 1127, "dislikes": 218, "difficulty": "Medium"}, {"questionId": "1753", "title": "Path With Minimum Effort", "titleSlug": "path-with-minimum-effort", "likes": 1090, "dislikes": 51, "difficulty": "Medium"}, {"questionId": "685", "title": "Redundant Connection II", "titleSlug": "redundant-connection-ii", "likes": 1075, "dislikes": 244, "difficulty": "Hard"}, {"questionId": "799", "title": "Minimum Distance Between BST Nodes", "titleSlug": "minimum-distance-between-bst-nodes", "likes": 1016, "dislikes": 254, "difficulty": "Easy"}, {"questionId": "690", "title": "Employee Importance", "titleSlug": "employee-importance", "likes": 982, "dislikes": 892, "difficulty": "Easy"}, {"questionId": "491", "title": "Increasing Subsequences", "titleSlug": "increasing-subsequences", "likes": 972, "dislikes": 135, "difficulty": "Medium"}, {"questionId": "1243", "title": "Sum of Nodes with Even-Valued Grandparent", "titleSlug": "sum-of-nodes-with-even-valued-grandparent", "likes": 939, "dislikes": 34, "difficulty": "Medium"}, {"questionId": "679", "title": "24 Game", "titleSlug": "24-game", "likes": 918, "dislikes": 184, "difficulty": "Hard"}, {"questionId": "794", "title": "Swim in Rising Water", "titleSlug": "swim-in-rising-water", "likes": 888, "dislikes": 68, "difficulty": "Hard"}, {"questionId": "563", "title": "Binary Tree Tilt", "titleSlug": "binary-tree-tilt", "likes": 873, "dislikes": 1573, "difficulty": "Easy"}, {"questionId": "529", "title": "Minesweeper", "titleSlug": "minesweeper", "likes": 871, "dislikes": 649, "difficulty": "Medium"}, {"questionId": "1442", "title": "Number of Operations to Make Network Connected", "titleSlug": "number-of-operations-to-make-network-connected", "likes": 861, "dislikes": 16, "difficulty": "Medium"}, {"questionId": "546", "title": "Remove Boxes", "titleSlug": "remove-boxes", "likes": 854, "dislikes": 58, "difficulty": "Hard"}, {"questionId": "1380", "title": "Number of Closed Islands", "titleSlug": "number-of-closed-islands", "likes": 822, "dislikes": 24, "difficulty": "Medium"}, {"questionId": "1492", "title": "Time Needed to Inform All Employees", "titleSlug": "time-needed-to-inform-all-employees", "likes": 788, "dislikes": 70, "difficulty": "Medium"}, {"questionId": "473", "title": "Matchsticks to Square", "titleSlug": "matchsticks-to-square", "likes": 776, "dislikes": 66, "difficulty": "Medium"}, {"questionId": "576", "title": "Out of Boundary Paths", "titleSlug": "out-of-boundary-paths", "likes": 762, "dislikes": 148, "difficulty": "Medium"}, {"questionId": "854", "title": "Making A Large Island", "titleSlug": "making-a-large-island", "likes": 734, "dislikes": 22, "difficulty": "Hard"}, {"questionId": "638", "title": "Shopping Offers", "titleSlug": "shopping-offers", "likes": 729, "dislikes": 522, "difficulty": "Medium"}, {"questionId": "1544", "title": "Count Good Nodes in Binary Tree", "titleSlug": "count-good-nodes-in-binary-tree", "likes": 689, "dislikes": 33, "difficulty": "Medium"}, {"questionId": "1218", "title": "Lowest Common Ancestor of Deepest Leaves", "titleSlug": "lowest-common-ancestor-of-deepest-leaves", "likes": 680, "dislikes": 632, "difficulty": "Medium"}, {"questionId": "1653", "title": "Number of Good Leaf Nodes Pairs", "titleSlug": "number-of-good-leaf-nodes-pairs", "likes": 674, "dislikes": 13, "difficulty": "Medium"}, {"questionId": "1568", "title": "Pseudo-Palindromic Paths in a Binary Tree", "titleSlug": "pseudo-palindromic-paths-in-a-binary-tree", "likes": 660, "dislikes": 21, "difficulty": "Medium"}, {"questionId": "1007", "title": "Numbers With Same Consecutive Differences", "titleSlug": "numbers-with-same-consecutive-differences", "likes": 647, "dislikes": 121, "difficulty": "Medium"}, {"questionId": "1093", "title": "Recover a Tree From Preorder Traversal", "titleSlug": "recover-a-tree-from-preorder-traversal", "likes": 647, "dislikes": 24, "difficulty": "Hard"}, {"questionId": "1576", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero", "likes": 646, "dislikes": 18, "difficulty": "Medium"}, {"questionId": "1248", "title": "Binary Tree Coloring Game", "titleSlug": "binary-tree-coloring-game", "likes": 641, "dislikes": 137, "difficulty": "Medium"}, {"questionId": "1030", "title": "Smallest String Starting From Leaf", "titleSlug": "smallest-string-starting-from-leaf", "likes": 612, "dislikes": 120, "difficulty": "Medium"}, {"questionId": "664", "title": "Strange Printer", "titleSlug": "strange-printer", "likes": 570, "dislikes": 54, "difficulty": "Hard"}, {"questionId": "1554", "title": "Minimum Time to Collect All Apples in a Tree", "titleSlug": "minimum-time-to-collect-all-apples-in-a-tree", "likes": 564, "dislikes": 61, "difficulty": "Medium"}, {"questionId": "754", "title": "Cracking the Safe", "titleSlug": "cracking-the-safe", "likes": 558, "dislikes": 817, "difficulty": "Hard"}, {"questionId": "514", "title": "Freedom Trail", "titleSlug": "freedom-trail", "likes": 531, "dislikes": 27, "difficulty": "Hard"}, {"questionId": "1011", "title": "Flip Binary Tree To Match Preorder Traversal", "titleSlug": "flip-binary-tree-to-match-preorder-traversal", "likes": 531, "dislikes": 211, "difficulty": "Medium"}, {"questionId": "1465", "title": "Maximum Product of Splitted Binary Tree", "titleSlug": "maximum-product-of-splitted-binary-tree", "likes": 527, "dislikes": 44, "difficulty": "Medium"}, {"questionId": "869", "title": "Similar String Groups", "titleSlug": "similar-string-groups", "likes": 526, "dislikes": 147, "difficulty": "Hard"}, {"questionId": "1073", "title": "Number of Enclaves", "titleSlug": "number-of-enclaves", "likes": 501, "dislikes": 24, "difficulty": "Medium"}, {"questionId": "1498", "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree", "titleSlug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree", "likes": 459, "dislikes": 613, "difficulty": "Medium"}, {"questionId": "960", "title": "Minimize Malware Spread", "titleSlug": "minimize-malware-spread", "likes": 415, "dislikes": 316, "difficulty": "Hard"}, {"questionId": "1309", "title": "Sort Items by Groups Respecting Dependencies", "titleSlug": "sort-items-by-groups-respecting-dependencies", "likes": 397, "dislikes": 70, "difficulty": "Hard"}, {"questionId": "757", "title": "Pyramid Transition Matrix", "titleSlug": "pyramid-transition-matrix", "likes": 364, "dislikes": 379, "difficulty": "Medium"}, {"questionId": "1840", "title": "Minimize Hamming Distance After Swap Operations", "titleSlug": "minimize-hamming-distance-after-swap-operations", "likes": 344, "dislikes": 11, "difficulty": "Medium"}, {"questionId": "881", "title": "Loud and Rich", "titleSlug": "loud-and-rich", "likes": 323, "dislikes": 337, "difficulty": "Medium"}, {"questionId": "1507", "title": "Check if There is a Valid Path in a Grid", "titleSlug": "check-if-there-is-a-valid-path-in-a-grid", "likes": 323, "dislikes": 174, "difficulty": "Medium"}, {"questionId": "964", "title": "Minimize Malware Spread II", "titleSlug": "minimize-malware-spread-ii", "likes": 287, "dislikes": 60, "difficulty": "Hard"}, {"questionId": "488", "title": "Zuma Game", "titleSlug": "zuma-game", "likes": 283, "dislikes": 305, "difficulty": "Hard"}, {"questionId": "1663", "title": "Detect Cycles in 2D Grid", "titleSlug": "detect-cycles-in-2d-grid", "likes": 271, "dislikes": 9, "difficulty": "Hard"}, {"questionId": "1157", "title": "Insufficient Nodes in Root to Leaf Paths", "titleSlug": "insufficient-nodes-in-root-to-leaf-paths", "likes": 254, "dislikes": 382, "difficulty": "Medium"}, {"questionId": "1643", "title": "Number of Nodes in the Sub-Tree With the Same Label", "titleSlug": "number-of-nodes-in-the-sub-tree-with-the-same-label", "likes": 248, "dislikes": 252, "difficulty": "Medium"}, {"questionId": "1613", "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "titleSlug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree", "likes": 230, "dislikes": 33, "difficulty": "Hard"}, {"questionId": "1493", "title": "Frog Position After T Seconds", "titleSlug": "frog-position-after-t-seconds", "likes": 194, "dislikes": 70, "difficulty": "Hard"}, {"questionId": "1104", "title": "Coloring A Border", "titleSlug": "coloring-a-border", "likes": 190, "dislikes": 361, "difficulty": "Medium"}, {"questionId": "1747", "title": "Lexicographically Smallest String After Applying Operations", "titleSlug": "lexicographically-smallest-string-after-applying-operations", "likes": 142, "dislikes": 185, "difficulty": "Medium"}, {"questionId": "750", "title": "Contain Virus", "titleSlug": "contain-virus", "likes": 140, "dislikes": 309, "difficulty": "Hard"}, {"questionId": "1875", "title": "Tree of Coprimes", "titleSlug": "tree-of-coprimes", "likes": 124, "dislikes": 11, "difficulty": "Hard"}]